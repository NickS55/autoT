{"version":3,"sources":["components/CardRenderer.js","App.js","reportWebVitals.js","index.js"],"names":["CardRenderer","props","Data","className","map","card","index","Card","Img","variant","src","image","showBridge","alt","Body","classname","Title","Heading","Text","Subheading","Price","App","CardData","data","useState","sortType","setSortType","Button","onClick","items","sub","A","B","sort","a","b","toUpperCase","sortPrice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+rCAkCeA,EA9BM,SAACC,GACpB,IAAMC,EAAOD,EAAMC,KA0BnB,OAAO,qBAAKC,UAAU,OAAf,SAAuBD,EAAKE,KAhBhB,SAACC,EAAMC,GACxB,OACE,eAACC,EAAA,EAAD,CAAkBJ,UAAU,OAA5B,UACE,cAACI,EAAA,EAAKC,IAAN,CAAUL,UAAY,aAAaM,QAAQ,MAAMC,KAVpCC,EAUmDN,EAAKO,WATnED,EACK,oHAED,gDAM4EE,IAAK,aACvF,eAACN,EAAA,EAAKO,KAAN,CAAWC,UAAU,YAArB,UACE,cAACR,EAAA,EAAKS,MAAN,CAAYb,UAAY,aAAxB,SAAsCE,EAAKY,UAC3C,cAACV,EAAA,EAAKW,KAAN,CAAWf,UAAY,YAAvB,SAAoCE,EAAKc,aACzC,sBAAKhB,UAAU,cAAf,UACE,oBAAIA,UAAY,cAChB,eAACI,EAAA,EAAKW,KAAN,CAAWf,UAAY,aAAvB,cAAsCE,EAAKe,iBAPtCd,GATf,IAAmBK,Q,gBCsDNU,MApDf,WACE,IAAIC,EAAWC,EADF,EAGmBC,mBAAS,SAH5B,mBAGNC,EAHM,KAGIC,EAHJ,KAwCb,OACE,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMF,EAAY,UAAnC,2BACA,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMF,EAAY,YAAnC,6BACA,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMF,EAAY,eAAnC,gCACA,qBAAKvB,UAAY,YAAjB,SACE,cAAC,EAAD,CAAcD,KAzCpB,SAAmB2B,EAAOC,GACxB,IAQMC,EACAC,EAoBR,MA3Bc,UAARF,EACKD,EAAMI,MAAK,SAAUC,EAAGC,GAC7B,OAAOD,EAAEd,MAAQe,EAAEf,SAMdS,EAAMI,MAAK,SAASC,EAAGC,GAU5B,MATY,YAARL,GAEFC,EAAIG,EAAEjB,QAAQmB,cACdJ,EAAIG,EAAElB,QAAQmB,gBAGdL,EAAIG,EAAEf,WAAWiB,cACjBJ,EAAIG,EAAEhB,WAAWiB,eAEfL,EAAIC,GACE,EAEND,EAAIC,EACC,EAEF,KAceK,CAAUf,EAAUG,WC5CnCa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d4675347.chunk.js","sourcesContent":["import '../card.css'\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nconst CardRenderer = (props) => {\n  const Data = props.Data\n\n  \n  function loadImage(image){\n      if (image){\n        return(\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/GoldenGateBridge-001.jpg/540px-GoldenGateBridge-001.jpg\")\n      }\n      return (\"https://wallpaperaccess.com/full/1750672.jpg\")\n  }\n\n  const renderCard = (card, index) => {\n    return (\n      <Card key={index} className=\"card\">\n        <Card.Img className = \"card-image\" variant=\"top\" src={loadImage(card.showBridge)} alt= \"No Image\" />\n        <Card.Body classname=\"card-body\">\n          <Card.Title className = \"card-title\">{card.Heading}</Card.Title>\n          <Card.Text className = \"card-text\">{card.Subheading}</Card.Text>\n          <div className=\"card-footer\">\n            <hr className = \"card-line\"/>\n            <Card.Text className = \"card-price\">${card.Price}</Card.Text>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  };\n\n  return <div className=\"grid\">{Data.map(renderCard)}</div>;\n};\n\nexport default CardRenderer;","import './App.css';\nimport React, {useState} from 'react';\nimport CardRenderer from './components/CardRenderer';\nimport { Button } from 'react-bootstrap';\nimport data from './UIE-InterviewProject.json'\n\n\n\n\n\nfunction App() {\n  let CardData = data\n\n  const [sortType, setSortType] = useState(\"Price\")\n\n  function sortPrice(items, sub){\n    let data = items\n\n    if (sub === \"Price\"){\n      data = items.sort(function (a, b) {\n        return a.Price - b.Price;\n      });\n    }\n    else { //if sorting by words\n      var A\n      var B\n      data = items.sort(function(a, b) {\n        if (sub === \"Heading\"){\n          // heading - ignore upper and lowercase\n          A = a.Heading.toUpperCase(); \n          B = b.Heading.toUpperCase(); \n        } else {\n          // SubHeading - ignore upper and lowercase\n          A = a.Subheading.toUpperCase(); \n          B = b.Subheading.toUpperCase(); \n        }\n        if (A < B) {\n          return -1;\n        }\n        if (A > B) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n  return data\n  }\n\n\n  \n  return(\n    <div>\n      <Button onClick={() => setSortType(\"Price\")}>Sort By Price</Button>\n      <Button onClick={() => setSortType(\"Heading\")}>Sort By Heading</Button>\n      <Button onClick={() => setSortType(\"Subheading\")}>Sort By Subheading</Button>\n      <div className = \"container\">\n        <CardRenderer Data = {sortPrice(CardData, sortType)} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}